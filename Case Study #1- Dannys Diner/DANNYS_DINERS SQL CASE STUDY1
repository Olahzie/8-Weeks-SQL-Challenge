/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

-- Example Query:
SELECT
  	product_id,
    product_name,
    price
FROM dannys_diner.menu
ORDER BY price DESC
LIMIT 5;


-- 1. What is the total amount each customer spent at the restaurant?

SELECT 
	customer_id, 
    SUM(price) AS total_amount
FROM dannys_diner.sales
INNER JOIN dannys_diner.menu 
ON sales.product_id = menu.product_id
GROUP BY customer_id;

-- 2. How many days has each customer visited the restaurant?

SELECT
	customer_id,
    COUNT(order_date) AS days_number
FROM dannys_diner.sales
GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

SELECT
	customer_id,
	product_name,
    order_date
FROM dannys_diner.sales
INNER JOIN dannys_diner.menu 
ON sales.product_id = menu.product_id
WHERE order_date in (SELECT first_date FROM (SELECT customer_id, MIN(order_date) AS first_date FROM 							dannys_diner.sales
                    GROUP BY customer_id) Z GROUP BY first_date)
GROUP BY customer_id,product_name, order_date
ORDER BY customer_id;



-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
  
 SELECT
 	customer_id,
    product_name,
    COUNT(sales.product_id) AS purchased_times
FROM dannys_diner.menu
INNER JOIN dannys_diner.sales 
ON sales.product_id = menu.product_id
WHERE product_name = (SELECT product_name FROM
   (SELECT
      product_name,
   	  COUNT(sales.product_id) AS occurence
  	FROM dannys_diner.menu
  	INNER JOIN dannys_diner.sales 
  	ON sales.product_id = menu.product_id
  	GROUP BY product_name
  	ORDER BY occurence DESC
  	LIMIT 1) x)
GROUP BY product_name, customer_id;

-- 5. Which item was the most popular for each customer?

SELECT 
      customer_id,
      product_name,
      COUNT(sales.product_id) AS popular
  FROM dannys_diner.sales
  INNER JOIN dannys_diner.menu 
  ON sales.product_id = menu.product_id
  GROUP BY customer_id, product_name
  ORDER BY COUNT(sales.product_id) DESC, customer_id DESC
  LIMIT 3;
  

   
        
        
-- 6. Which item was purchased first by the customer after they became a member?
SELECT
	sales.customer_id,
    product_name,
    join_date,
    order_date
FROM dannys_diner.sales
INNER JOIN dannys_diner.menu 
ON sales.product_id = menu.product_id
INNER JOIN dannys_diner.members 
ON sales.customer_id = members.customer_id
group by sales.customer_id, product_name,order_date,join_date
having order_date > (SELECT MIN(join_date) FROM dannys_diner.members)
order by min(order_date),sales.customer_id;

-- 7. Which item was purchased just before the customer became a member?
    
select 
	sales.customer_id,
    product_name,
    join_date,
    max(order_date)
FROM dannys_diner.sales
INNER JOIN dannys_diner.menu 
ON sales.product_id = menu.product_id
INNER JOIN dannys_diner.members 
ON sales.customer_id = members.customer_id
group by sales.customer_id, product_name,order_date,join_date
having order_date < (SELECT MIN(join_date) FROM dannys_diner.members)
order by max(order_date) desc,sales.customer_id desc;

-- 8. What is the total items and amount spent for each member before they became a member?

 select 
 	sales.customer_id,
    count(sales.product_id),
    sum(price)
FROM dannys_diner.sales
INNER JOIN dannys_diner.members
ON sales.customer_id = members.customer_id
INNER JOIN dannys_diner.menu
ON sales.product_id = menu.product_id
where order_date < (SELECT MIN(join_date) FROM dannys_diner.members)
group by sales.customer_id;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT
	custom_id,
    sum(total_price) AS total_price,
    sum(new_price) AS total_points
FROM

  (SELECT
      sales.customer_id AS custom_id,
      product_name,
      sum(price) AS total_price,
      CASE 
          WHEN sum(price) >0
                  AND product_name = 'sushi' THEN sum(price)*20
          ELSE	sum(price)*10
     END
     AS  new_price
  FROM dannys_diner.sales
  INNER JOIN dannys_diner.menu
  ON sales.product_id = menu.product_id
  group by sales.customer_id,product_name) Y
GROUP BY Y.custom_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
SELECT
	custom_id,
    sum(total_price) AS total_price,
    sum(new_price) AS total_points
FROM

  (SELECT
      sales.customer_id AS custom_id,
      order_date,
      sum(price) AS total_price,
      CASE 
          WHEN sum(price) >0
                  AND order_date >= (select min(join_date) from dannys_diner.members) THEN sum(price)*20
          ELSE	sum(price)*10
     END
     AS  new_price
  FROM dannys_diner.sales
  INNER JOIN dannys_diner.menu
  ON sales.product_id = menu.product_id
  INNER JOIN dannys_diner.members
  ON sales.customer_id = members.customer_id
  where order_date <='2021-01-31'
  group by sales.customer_id,order_date) Y
GROUP BY Y.custom_id;
 
 